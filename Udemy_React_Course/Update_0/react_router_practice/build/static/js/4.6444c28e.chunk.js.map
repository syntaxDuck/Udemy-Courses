{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.module.css","components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","console","log","commentData","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","params","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.6444c28e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2Ds4k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__33ct1\",\"loading\":\"NewCommentForm_loading__3btL_\",\"control\":\"NewCommentForm_control__1gZ6G\",\"actions\":\"NewCommentForm_actions__3wEEu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__WmpLM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2jHQY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1RBSl\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [onAddedComment, status, error]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    console.log(enteredText);\n    sendRequest({ commentData: enteredText, quoteId: quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport classes from \"./Comments.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../comments/CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    setIsAddingComment(false);\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          onAddedComment={addedCommentHandler}\n          quoteId={quoteId}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p className=\"centered\">No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}